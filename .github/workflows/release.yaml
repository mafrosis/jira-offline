name: release
on:
  push:
    branches:
      - master

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Display current python info
      run: |
        python -VV
        pip -V

    - name: Checkout
      uses: actions/checkout@master

    - name: Build package
      run: |
        make package

    - name: Install package
      run: |
        python3 -m pip install dist/jira_offline-*-py3-*.whl

    - name: Extract version & determine if release needed
      id: extract
      run: |
        echo "##[set-output name=version;]$(make version)"
        echo "##[set-output name=is_prerelease;]$(make is_prerelease)"
        echo "##[set-output name=needs_release;]$(if git tag | grep -q $(make version); then echo 0; else echo 1; fi)"

    - name: Create Release
      id: create_release
      uses: actions/create-release@master
      if: steps.extract.outputs.needs_release == 1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.extract.outputs.version }}
        release_name: ${{ steps.extract.outputs.version }}
        draft: false
        prerelease: ${{ steps.extract.outputs.is_prerelease }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      if: steps.extract.outputs.needs_release == 1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/jira-offline-${{ steps.extract.outputs.version }}.tar.gz
        asset_name: jira-offline-${{ steps.extract.outputs.version }}.tar.gz
        asset_content_type: application/tar+gzip

    - name: Publish to Pypi
      if: steps.extract.outputs.needs_release == 1
      run: |
        make publish-pypi
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
